/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Blog Backend API
 * A scalable blog backend built with FastAPI and SQLModel
 * OpenAPI spec version: 1.0.0
 */
import useSwr from 'swr';
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr';

import useSWRMutation from 'swr/mutation';
import type {
  SWRMutationConfiguration
} from 'swr/mutation';

import { customInstance } from './axios';
export type AlbumResponseDTODescription = string | null;

export type AlbumResponseDTOCollectionName = string | null;

export interface AlbumResponseDTO {
  created_at?: string;
  updated_at?: string;
  id: string;
  title: string;
  description?: AlbumResponseDTODescription;
  collection_id: string;
  collection_name?: AlbumResponseDTOCollectionName;
}

export type AlbumWithImagesResponseDTODescription = string | null;

export type AlbumWithImagesResponseDTOCollectionName = string | null;

export interface AlbumWithImagesResponseDTO {
  created_at?: string;
  updated_at?: string;
  id: string;
  title: string;
  description?: AlbumWithImagesResponseDTODescription;
  collection_id: string;
  collection_name?: AlbumWithImagesResponseDTOCollectionName;
  images?: ImageResponseDTO[];
}

export type BodyCreateImageImagesPostTitle = string | null;

export type BodyCreateImageImagesPostCaption = string | null;

export type BodyCreateImageImagesPostAltText = string | null;

export type BodyCreateImageImagesPostLicense = string | null;

export type BodyCreateImageImagesPostAttribution = string | null;

export type BodyCreateImageImagesPostTimestamp = string | null;

export interface BodyCreateImageImagesPost {
  file: Blob;
  title?: BodyCreateImageImagesPostTitle;
  caption?: BodyCreateImageImagesPostCaption;
  alt_text?: BodyCreateImageImagesPostAltText;
  license?: BodyCreateImageImagesPostLicense;
  attribution?: BodyCreateImageImagesPostAttribution;
  privacy?: string;
  timestamp?: BodyCreateImageImagesPostTimestamp;
  albums?: string;
}

export type CollectionDTOId = string | null;

export interface CollectionDTO {
  created_at?: string;
  updated_at?: string;
  id?: CollectionDTOId;
  name: string;
}

export interface CommentCreateDTO {
  content: string;
}

export type CommentResponseDTOUsername = string | null;

export interface CommentResponseDTO {
  id: string;
  user_id: string;
  image_id: string;
  content: string;
  timestamp: string;
  username?: CommentResponseDTOUsername;
}

export type CreateUserDTODisplayName = string | null;

export type CreateUserDTORole = string | null;

export interface CreateUserDTO {
  created_at?: string;
  updated_at?: string;
  username: string;
  password: string;
  display_name?: CreateUserDTODisplayName;
  role?: CreateUserDTORole;
}

export type GetSiteInfoDTOUser = UserResponseDTO | null;

export type GetSiteInfoDTOSettings = { [key: string]: unknown };

export interface GetSiteInfoDTO {
  created_at?: string;
  updated_at?: string;
  user?: GetSiteInfoDTOUser;
  settings?: GetSiteInfoDTOSettings;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface HomeResponseDTO {
  images: ImageResponseDTO[];
  albums: AlbumResponseDTO[];
}

export type ImageResponseDTOId = string | null;

export type ImageResponseDTOSmallUrl = string | null;

export type ImageResponseDTOMediumUrl = string | null;

export type ImageResponseDTOLargeUrl = string | null;

export type ImageResponseDTOTitle = string | null;

export type ImageResponseDTOCaption = string | null;

export type ImageResponseDTOAltText = string | null;

export type ImageResponseDTOLicense = string | null;

export type ImageResponseDTOAttribution = string | null;

export type ImageResponseDTOUserLiked = boolean | null;

export type ImageResponseDTOLikeCount = number | null;

export type ImageResponseDTOSimilarityScore = number | null;

export interface ImageResponseDTO {
  created_at?: string;
  updated_at?: string;
  id?: ImageResponseDTOId;
  url?: string;
  mime_type?: string;
  small_url?: ImageResponseDTOSmallUrl;
  medium_url?: ImageResponseDTOMediumUrl;
  large_url?: ImageResponseDTOLargeUrl;
  title?: ImageResponseDTOTitle;
  caption?: ImageResponseDTOCaption;
  alt_text?: ImageResponseDTOAltText;
  license?: ImageResponseDTOLicense;
  attribution?: ImageResponseDTOAttribution;
  privacy?: string;
  created_by?: string;
  timestamp?: string;
  view_count?: number;
  download_count?: number;
  user_liked?: ImageResponseDTOUserLiked;
  like_count?: ImageResponseDTOLikeCount;
  similarity_score?: ImageResponseDTOSimilarityScore;
}

export interface LikeToggleResponseDTO {
  liked: boolean;
  like_count: number;
}

export interface LoginRequestDTO {
  created_at?: string;
  updated_at?: string;
  username: string;
  password: string;
}

export interface UpdateSiteSettingsDTO {
  created_at?: string;
  updated_at?: string;
  key: string;
  value: string;
}

export type UpdateUserDTOPassword = string | null;

export type UpdateUserDTODisplayName = string | null;

export type UpdateUserDTORole = string | null;

export interface UpdateUserDTO {
  created_at?: string;
  updated_at?: string;
  password?: UpdateUserDTOPassword;
  display_name?: UpdateUserDTODisplayName;
  role?: UpdateUserDTORole;
}

export type UserResponseDTODisplayName = string | null;

export interface UserResponseDTO {
  created_at?: string;
  updated_at?: string;
  id: string;
  username: string;
  display_name?: UserResponseDTODisplayName;
  role: string;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export type ListUsersUsersGetParams = {
/**
 * @minimum 0
 */
skip?: number;
/**
 * @minimum 1
 * @maximum 100
 */
limit?: number;
};

export type UpdateSiteSettingsSiteSettingsPost200 = { [key: string]: unknown };

export type DeleteAlbumAlbumsAlbumIdDelete200 = { [key: string]: unknown };

export type GetImageImagesImageIdGetParams = {
user_id?: string | null;
};

export type DeleteImageImagesImageIdDelete200 = { [key: string]: unknown };

export type CreateImageImagesPostParams = {
user_id?: string | null;
};

export type SearchImagesImagesSearchGetParams = {
query: string;
};

export type AddCommentImagesImageIdCommentsPostParams = {
user_id?: string | null;
};

export type DeleteCommentImagesImageIdCommentsCommentIdDeleteParams = {
user_id?: string | null;
};

export type ToggleLikeImagesImageIdLikePostParams = {
user_id?: string | null;
};

export type DeleteCollectionCollectionsCollectionIdDelete200 = { [key: string]: unknown };

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  
/**
 * Register a new user.
 * @summary Register
 */
export const registerAuthRegisterPost = (
    createUserDTO: CreateUserDTO,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UserResponseDTO>(
    {url: `/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createUserDTO
    },
    options);
  }



export const getRegisterAuthRegisterPostMutationFetcher = ( options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: CreateUserDTO }): Promise<UserResponseDTO> => {
    return registerAuthRegisterPost(arg, options);
  }
}
export const getRegisterAuthRegisterPostMutationKey = () => [`/auth/register`] as const;

export type RegisterAuthRegisterPostMutationResult = NonNullable<Awaited<ReturnType<typeof registerAuthRegisterPost>>>
export type RegisterAuthRegisterPostMutationError = HTTPValidationError

/**
 * @summary Register
 */
export const useRegisterAuthRegisterPost = <TError = HTTPValidationError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof registerAuthRegisterPost>>, TError, Key, CreateUserDTO, Awaited<ReturnType<typeof registerAuthRegisterPost>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getRegisterAuthRegisterPostMutationKey();
  const swrFn = getRegisterAuthRegisterPostMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Login user and create session.
 * @summary Login
 */
export const loginAuthLoginPost = (
    loginRequestDTO: LoginRequestDTO,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<unknown>(
    {url: `/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginRequestDTO
    },
    options);
  }



export const getLoginAuthLoginPostMutationFetcher = ( options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: LoginRequestDTO }): Promise<unknown> => {
    return loginAuthLoginPost(arg, options);
  }
}
export const getLoginAuthLoginPostMutationKey = () => [`/auth/login`] as const;

export type LoginAuthLoginPostMutationResult = NonNullable<Awaited<ReturnType<typeof loginAuthLoginPost>>>
export type LoginAuthLoginPostMutationError = HTTPValidationError

/**
 * @summary Login
 */
export const useLoginAuthLoginPost = <TError = HTTPValidationError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof loginAuthLoginPost>>, TError, Key, LoginRequestDTO, Awaited<ReturnType<typeof loginAuthLoginPost>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getLoginAuthLoginPostMutationKey();
  const swrFn = getLoginAuthLoginPostMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Logout user and delete session.
 * @summary Logout
 */
export const logoutAuthLogoutPost = (
    
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<unknown>(
    {url: `/auth/logout`, method: 'POST'
    },
    options);
  }



export const getLogoutAuthLogoutPostMutationFetcher = ( options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, __: { arg: Arguments }): Promise<unknown> => {
    return logoutAuthLogoutPost(options);
  }
}
export const getLogoutAuthLogoutPostMutationKey = () => [`/auth/logout`] as const;

export type LogoutAuthLogoutPostMutationResult = NonNullable<Awaited<ReturnType<typeof logoutAuthLogoutPost>>>
export type LogoutAuthLogoutPostMutationError = unknown

/**
 * @summary Logout
 */
export const useLogoutAuthLogoutPost = <TError = unknown>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof logoutAuthLogoutPost>>, TError, Key, Arguments, Awaited<ReturnType<typeof logoutAuthLogoutPost>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getLogoutAuthLogoutPostMutationKey();
  const swrFn = getLogoutAuthLogoutPostMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary List Users
 */
export const listUsersUsersGet = (
    params?: ListUsersUsersGetParams,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UserResponseDTO[]>(
    {url: `/users/`, method: 'GET',
        params
    },
    options);
  }



export const getListUsersUsersGetKey = (params?: ListUsersUsersGetParams,) => [`/users/`, ...(params ? [params]: [])] as const;

export type ListUsersUsersGetQueryResult = NonNullable<Awaited<ReturnType<typeof listUsersUsersGet>>>
export type ListUsersUsersGetQueryError = HTTPValidationError

/**
 * @summary List Users
 */
export const useListUsersUsersGet = <TError = HTTPValidationError>(
  params?: ListUsersUsersGetParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof listUsersUsersGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getListUsersUsersGetKey(params) : null);
  const swrFn = () => listUsersUsersGet(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Add User
 */
export const addUserUsersPost = (
    createUserDTO: CreateUserDTO,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UserResponseDTO>(
    {url: `/users/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createUserDTO
    },
    options);
  }



export const getAddUserUsersPostMutationFetcher = ( options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: CreateUserDTO }): Promise<UserResponseDTO> => {
    return addUserUsersPost(arg, options);
  }
}
export const getAddUserUsersPostMutationKey = () => [`/users/`] as const;

export type AddUserUsersPostMutationResult = NonNullable<Awaited<ReturnType<typeof addUserUsersPost>>>
export type AddUserUsersPostMutationError = HTTPValidationError

/**
 * @summary Add User
 */
export const useAddUserUsersPost = <TError = HTTPValidationError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof addUserUsersPost>>, TError, Key, CreateUserDTO, Awaited<ReturnType<typeof addUserUsersPost>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAddUserUsersPostMutationKey();
  const swrFn = getAddUserUsersPostMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Get User
 */
export const getUserUsersUserIdGet = (
    userId: string,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UserResponseDTO>(
    {url: `/users/${userId}`, method: 'GET'
    },
    options);
  }



export const getGetUserUsersUserIdGetKey = (userId: string,) => [`/users/${userId}`] as const;

export type GetUserUsersUserIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserUsersUserIdGet>>>
export type GetUserUsersUserIdGetQueryError = HTTPValidationError

/**
 * @summary Get User
 */
export const useGetUserUsersUserIdGet = <TError = HTTPValidationError>(
  userId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUserUsersUserIdGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(userId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUserUsersUserIdGetKey(userId) : null);
  const swrFn = () => getUserUsersUserIdGet(userId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Update User
 */
export const updateUserUsersUserIdPut = (
    userId: string,
    updateUserDTO: UpdateUserDTO,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UserResponseDTO>(
    {url: `/users/${userId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateUserDTO
    },
    options);
  }



export const getUpdateUserUsersUserIdPutMutationFetcher = (userId: string, options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: UpdateUserDTO }): Promise<UserResponseDTO> => {
    return updateUserUsersUserIdPut(userId, arg, options);
  }
}
export const getUpdateUserUsersUserIdPutMutationKey = (userId: string,) => [`/users/${userId}`] as const;

export type UpdateUserUsersUserIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateUserUsersUserIdPut>>>
export type UpdateUserUsersUserIdPutMutationError = HTTPValidationError

/**
 * @summary Update User
 */
export const useUpdateUserUsersUserIdPut = <TError = HTTPValidationError>(
  userId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof updateUserUsersUserIdPut>>, TError, Key, UpdateUserDTO, Awaited<ReturnType<typeof updateUserUsersUserIdPut>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUpdateUserUsersUserIdPutMutationKey(userId);
  const swrFn = getUpdateUserUsersUserIdPutMutationFetcher(userId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Delete user (only own profile or admin).
 * @summary Delete User
 */
export const deleteUserUsersUserIdDelete = (
    userId: string,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<unknown>(
    {url: `/users/${userId}`, method: 'DELETE'
    },
    options);
  }



export const getDeleteUserUsersUserIdDeleteMutationFetcher = (userId: string, options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, __: { arg: Arguments }): Promise<unknown> => {
    return deleteUserUsersUserIdDelete(userId, options);
  }
}
export const getDeleteUserUsersUserIdDeleteMutationKey = (userId: string,) => [`/users/${userId}`] as const;

export type DeleteUserUsersUserIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUserUsersUserIdDelete>>>
export type DeleteUserUsersUserIdDeleteMutationError = HTTPValidationError

/**
 * @summary Delete User
 */
export const useDeleteUserUsersUserIdDelete = <TError = HTTPValidationError>(
  userId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteUserUsersUserIdDelete>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteUserUsersUserIdDelete>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteUserUsersUserIdDeleteMutationKey(userId);
  const swrFn = getDeleteUserUsersUserIdDeleteMutationFetcher(userId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Get Site Info
 */
export const getSiteInfoSiteInfoGet = (
    
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSiteInfoDTO>(
    {url: `/site/info`, method: 'GET'
    },
    options);
  }



export const getGetSiteInfoSiteInfoGetKey = () => [`/site/info`] as const;

export type GetSiteInfoSiteInfoGetQueryResult = NonNullable<Awaited<ReturnType<typeof getSiteInfoSiteInfoGet>>>
export type GetSiteInfoSiteInfoGetQueryError = unknown

/**
 * @summary Get Site Info
 */
export const useGetSiteInfoSiteInfoGet = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getSiteInfoSiteInfoGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetSiteInfoSiteInfoGetKey() : null);
  const swrFn = () => getSiteInfoSiteInfoGet(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Update Site Settings
 */
export const updateSiteSettingsSiteSettingsPost = (
    updateSiteSettingsDTO: UpdateSiteSettingsDTO,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateSiteSettingsSiteSettingsPost200>(
    {url: `/site/settings`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: updateSiteSettingsDTO
    },
    options);
  }



export const getUpdateSiteSettingsSiteSettingsPostMutationFetcher = ( options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: UpdateSiteSettingsDTO }): Promise<UpdateSiteSettingsSiteSettingsPost200> => {
    return updateSiteSettingsSiteSettingsPost(arg, options);
  }
}
export const getUpdateSiteSettingsSiteSettingsPostMutationKey = () => [`/site/settings`] as const;

export type UpdateSiteSettingsSiteSettingsPostMutationResult = NonNullable<Awaited<ReturnType<typeof updateSiteSettingsSiteSettingsPost>>>
export type UpdateSiteSettingsSiteSettingsPostMutationError = HTTPValidationError

/**
 * @summary Update Site Settings
 */
export const useUpdateSiteSettingsSiteSettingsPost = <TError = HTTPValidationError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof updateSiteSettingsSiteSettingsPost>>, TError, Key, UpdateSiteSettingsDTO, Awaited<ReturnType<typeof updateSiteSettingsSiteSettingsPost>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUpdateSiteSettingsSiteSettingsPostMutationKey();
  const swrFn = getUpdateSiteSettingsSiteSettingsPostMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary List Albums
 */
export const listAlbumsAlbumsGet = (
    
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<AlbumResponseDTO[]>(
    {url: `/albums/`, method: 'GET'
    },
    options);
  }



export const getListAlbumsAlbumsGetKey = () => [`/albums/`] as const;

export type ListAlbumsAlbumsGetQueryResult = NonNullable<Awaited<ReturnType<typeof listAlbumsAlbumsGet>>>
export type ListAlbumsAlbumsGetQueryError = unknown

/**
 * @summary List Albums
 */
export const useListAlbumsAlbumsGet = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof listAlbumsAlbumsGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getListAlbumsAlbumsGetKey() : null);
  const swrFn = () => listAlbumsAlbumsGet(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Create Album
 */
export const createAlbumAlbumsPost = (
    albumResponseDTO: AlbumResponseDTO,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<AlbumResponseDTO>(
    {url: `/albums/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: albumResponseDTO
    },
    options);
  }



export const getCreateAlbumAlbumsPostMutationFetcher = ( options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: AlbumResponseDTO }): Promise<AlbumResponseDTO> => {
    return createAlbumAlbumsPost(arg, options);
  }
}
export const getCreateAlbumAlbumsPostMutationKey = () => [`/albums/`] as const;

export type CreateAlbumAlbumsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createAlbumAlbumsPost>>>
export type CreateAlbumAlbumsPostMutationError = HTTPValidationError

/**
 * @summary Create Album
 */
export const useCreateAlbumAlbumsPost = <TError = HTTPValidationError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof createAlbumAlbumsPost>>, TError, Key, AlbumResponseDTO, Awaited<ReturnType<typeof createAlbumAlbumsPost>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateAlbumAlbumsPostMutationKey();
  const swrFn = getCreateAlbumAlbumsPostMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Get Album
 */
export const getAlbumAlbumsAlbumIdGet = (
    albumId: string,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<AlbumWithImagesResponseDTO>(
    {url: `/albums/${albumId}`, method: 'GET'
    },
    options);
  }



export const getGetAlbumAlbumsAlbumIdGetKey = (albumId: string,) => [`/albums/${albumId}`] as const;

export type GetAlbumAlbumsAlbumIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAlbumAlbumsAlbumIdGet>>>
export type GetAlbumAlbumsAlbumIdGetQueryError = HTTPValidationError

/**
 * @summary Get Album
 */
export const useGetAlbumAlbumsAlbumIdGet = <TError = HTTPValidationError>(
  albumId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAlbumAlbumsAlbumIdGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(albumId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAlbumAlbumsAlbumIdGetKey(albumId) : null);
  const swrFn = () => getAlbumAlbumsAlbumIdGet(albumId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Update Album
 */
export const updateAlbumAlbumsAlbumIdPut = (
    albumId: string,
    albumResponseDTO: AlbumResponseDTO,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<AlbumResponseDTO>(
    {url: `/albums/${albumId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: albumResponseDTO
    },
    options);
  }



export const getUpdateAlbumAlbumsAlbumIdPutMutationFetcher = (albumId: string, options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: AlbumResponseDTO }): Promise<AlbumResponseDTO> => {
    return updateAlbumAlbumsAlbumIdPut(albumId, arg, options);
  }
}
export const getUpdateAlbumAlbumsAlbumIdPutMutationKey = (albumId: string,) => [`/albums/${albumId}`] as const;

export type UpdateAlbumAlbumsAlbumIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateAlbumAlbumsAlbumIdPut>>>
export type UpdateAlbumAlbumsAlbumIdPutMutationError = HTTPValidationError

/**
 * @summary Update Album
 */
export const useUpdateAlbumAlbumsAlbumIdPut = <TError = HTTPValidationError>(
  albumId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof updateAlbumAlbumsAlbumIdPut>>, TError, Key, AlbumResponseDTO, Awaited<ReturnType<typeof updateAlbumAlbumsAlbumIdPut>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUpdateAlbumAlbumsAlbumIdPutMutationKey(albumId);
  const swrFn = getUpdateAlbumAlbumsAlbumIdPutMutationFetcher(albumId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Delete Album
 */
export const deleteAlbumAlbumsAlbumIdDelete = (
    albumId: string,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteAlbumAlbumsAlbumIdDelete200>(
    {url: `/albums/${albumId}`, method: 'DELETE'
    },
    options);
  }



export const getDeleteAlbumAlbumsAlbumIdDeleteMutationFetcher = (albumId: string, options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, __: { arg: Arguments }): Promise<DeleteAlbumAlbumsAlbumIdDelete200> => {
    return deleteAlbumAlbumsAlbumIdDelete(albumId, options);
  }
}
export const getDeleteAlbumAlbumsAlbumIdDeleteMutationKey = (albumId: string,) => [`/albums/${albumId}`] as const;

export type DeleteAlbumAlbumsAlbumIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAlbumAlbumsAlbumIdDelete>>>
export type DeleteAlbumAlbumsAlbumIdDeleteMutationError = HTTPValidationError

/**
 * @summary Delete Album
 */
export const useDeleteAlbumAlbumsAlbumIdDelete = <TError = HTTPValidationError>(
  albumId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteAlbumAlbumsAlbumIdDelete>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteAlbumAlbumsAlbumIdDelete>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteAlbumAlbumsAlbumIdDeleteMutationKey(albumId);
  const swrFn = getDeleteAlbumAlbumsAlbumIdDeleteMutationFetcher(albumId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Download Image
 */
export const downloadImageImagesDownloadImageFilenameGet = (
    imageFilename: string,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<unknown>(
    {url: `/images/download/${imageFilename}`, method: 'GET'
    },
    options);
  }



export const getDownloadImageImagesDownloadImageFilenameGetKey = (imageFilename: string,) => [`/images/download/${imageFilename}`] as const;

export type DownloadImageImagesDownloadImageFilenameGetQueryResult = NonNullable<Awaited<ReturnType<typeof downloadImageImagesDownloadImageFilenameGet>>>
export type DownloadImageImagesDownloadImageFilenameGetQueryError = HTTPValidationError

/**
 * @summary Download Image
 */
export const useDownloadImageImagesDownloadImageFilenameGet = <TError = HTTPValidationError>(
  imageFilename: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof downloadImageImagesDownloadImageFilenameGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(imageFilename)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getDownloadImageImagesDownloadImageFilenameGetKey(imageFilename) : null);
  const swrFn = () => downloadImageImagesDownloadImageFilenameGet(imageFilename, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Get Home Images
 */
export const getHomeImagesImagesHomeGet = (
    
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<HomeResponseDTO>(
    {url: `/images/home`, method: 'GET'
    },
    options);
  }



export const getGetHomeImagesImagesHomeGetKey = () => [`/images/home`] as const;

export type GetHomeImagesImagesHomeGetQueryResult = NonNullable<Awaited<ReturnType<typeof getHomeImagesImagesHomeGet>>>
export type GetHomeImagesImagesHomeGetQueryError = unknown

/**
 * @summary Get Home Images
 */
export const useGetHomeImagesImagesHomeGet = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getHomeImagesImagesHomeGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetHomeImagesImagesHomeGetKey() : null);
  const swrFn = () => getHomeImagesImagesHomeGet(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Get Image
 */
export const getImageImagesImageIdGet = (
    imageId: string,
    params?: GetImageImagesImageIdGetParams,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ImageResponseDTO>(
    {url: `/images/${imageId}`, method: 'GET',
        params
    },
    options);
  }



export const getGetImageImagesImageIdGetKey = (imageId: string,
    params?: GetImageImagesImageIdGetParams,) => [`/images/${imageId}`, ...(params ? [params]: [])] as const;

export type GetImageImagesImageIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getImageImagesImageIdGet>>>
export type GetImageImagesImageIdGetQueryError = HTTPValidationError

/**
 * @summary Get Image
 */
export const useGetImageImagesImageIdGet = <TError = HTTPValidationError>(
  imageId: string,
    params?: GetImageImagesImageIdGetParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getImageImagesImageIdGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(imageId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetImageImagesImageIdGetKey(imageId,params) : null);
  const swrFn = () => getImageImagesImageIdGet(imageId,params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Delete Image
 */
export const deleteImageImagesImageIdDelete = (
    imageId: string,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteImageImagesImageIdDelete200>(
    {url: `/images/${imageId}`, method: 'DELETE'
    },
    options);
  }



export const getDeleteImageImagesImageIdDeleteMutationFetcher = (imageId: string, options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, __: { arg: Arguments }): Promise<DeleteImageImagesImageIdDelete200> => {
    return deleteImageImagesImageIdDelete(imageId, options);
  }
}
export const getDeleteImageImagesImageIdDeleteMutationKey = (imageId: string,) => [`/images/${imageId}`] as const;

export type DeleteImageImagesImageIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteImageImagesImageIdDelete>>>
export type DeleteImageImagesImageIdDeleteMutationError = HTTPValidationError

/**
 * @summary Delete Image
 */
export const useDeleteImageImagesImageIdDelete = <TError = HTTPValidationError>(
  imageId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteImageImagesImageIdDelete>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteImageImagesImageIdDelete>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteImageImagesImageIdDeleteMutationKey(imageId);
  const swrFn = getDeleteImageImagesImageIdDeleteMutationFetcher(imageId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Create Image
 */
export const createImageImagesPost = (
    bodyCreateImageImagesPost: BodyCreateImageImagesPost,
    params?: CreateImageImagesPostParams,
 options?: SecondParameter<typeof customInstance>) => {const formData = new FormData();
formData.append(`file`, bodyCreateImageImagesPost.file)
if(bodyCreateImageImagesPost.title !== undefined && bodyCreateImageImagesPost.title !== null) {
 formData.append(`title`, bodyCreateImageImagesPost.title)
 }
if(bodyCreateImageImagesPost.caption !== undefined && bodyCreateImageImagesPost.caption !== null) {
 formData.append(`caption`, bodyCreateImageImagesPost.caption)
 }
if(bodyCreateImageImagesPost.alt_text !== undefined && bodyCreateImageImagesPost.alt_text !== null) {
 formData.append(`alt_text`, bodyCreateImageImagesPost.alt_text)
 }
if(bodyCreateImageImagesPost.license !== undefined && bodyCreateImageImagesPost.license !== null) {
 formData.append(`license`, bodyCreateImageImagesPost.license)
 }
if(bodyCreateImageImagesPost.attribution !== undefined && bodyCreateImageImagesPost.attribution !== null) {
 formData.append(`attribution`, bodyCreateImageImagesPost.attribution)
 }
if(bodyCreateImageImagesPost.privacy !== undefined) {
 formData.append(`privacy`, bodyCreateImageImagesPost.privacy)
 }
if(bodyCreateImageImagesPost.timestamp !== undefined && bodyCreateImageImagesPost.timestamp !== null) {
 formData.append(`timestamp`, bodyCreateImageImagesPost.timestamp)
 }
if(bodyCreateImageImagesPost.albums !== undefined) {
 formData.append(`albums`, bodyCreateImageImagesPost.albums)
 }

    return customInstance<ImageResponseDTO>(
    {url: `/images/`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData,
        params
    },
    options);
  }



export const getCreateImageImagesPostMutationFetcher = (params?: CreateImageImagesPostParams, options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: BodyCreateImageImagesPost }): Promise<ImageResponseDTO> => {
    return createImageImagesPost(arg, params, options);
  }
}
export const getCreateImageImagesPostMutationKey = (params?: CreateImageImagesPostParams,) => [`/images/`, ...(params ? [params]: [])] as const;

export type CreateImageImagesPostMutationResult = NonNullable<Awaited<ReturnType<typeof createImageImagesPost>>>
export type CreateImageImagesPostMutationError = HTTPValidationError

/**
 * @summary Create Image
 */
export const useCreateImageImagesPost = <TError = HTTPValidationError>(
  params?: CreateImageImagesPostParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof createImageImagesPost>>, TError, Key, BodyCreateImageImagesPost, Awaited<ReturnType<typeof createImageImagesPost>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateImageImagesPostMutationKey(params);
  const swrFn = getCreateImageImagesPostMutationFetcher(params, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Search Images
 */
export const searchImagesImagesSearchGet = (
    params: SearchImagesImagesSearchGetParams,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ImageResponseDTO[]>(
    {url: `/images/search/`, method: 'GET',
        params
    },
    options);
  }



export const getSearchImagesImagesSearchGetKey = (params: SearchImagesImagesSearchGetParams,) => [`/images/search/`, ...(params ? [params]: [])] as const;

export type SearchImagesImagesSearchGetQueryResult = NonNullable<Awaited<ReturnType<typeof searchImagesImagesSearchGet>>>
export type SearchImagesImagesSearchGetQueryError = HTTPValidationError

/**
 * @summary Search Images
 */
export const useSearchImagesImagesSearchGet = <TError = HTTPValidationError>(
  params: SearchImagesImagesSearchGetParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof searchImagesImagesSearchGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getSearchImagesImagesSearchGetKey(params) : null);
  const swrFn = () => searchImagesImagesSearchGet(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Get Image Comments
 */
export const getImageCommentsImagesImageIdCommentsGet = (
    imageId: string,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<CommentResponseDTO[]>(
    {url: `/images/${imageId}/comments`, method: 'GET'
    },
    options);
  }



export const getGetImageCommentsImagesImageIdCommentsGetKey = (imageId: string,) => [`/images/${imageId}/comments`] as const;

export type GetImageCommentsImagesImageIdCommentsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getImageCommentsImagesImageIdCommentsGet>>>
export type GetImageCommentsImagesImageIdCommentsGetQueryError = HTTPValidationError

/**
 * @summary Get Image Comments
 */
export const useGetImageCommentsImagesImageIdCommentsGet = <TError = HTTPValidationError>(
  imageId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getImageCommentsImagesImageIdCommentsGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(imageId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetImageCommentsImagesImageIdCommentsGetKey(imageId) : null);
  const swrFn = () => getImageCommentsImagesImageIdCommentsGet(imageId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Add Comment
 */
export const addCommentImagesImageIdCommentsPost = (
    imageId: string,
    commentCreateDTO: CommentCreateDTO,
    params?: AddCommentImagesImageIdCommentsPostParams,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<CommentResponseDTO>(
    {url: `/images/${imageId}/comments`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: commentCreateDTO,
        params
    },
    options);
  }



export const getAddCommentImagesImageIdCommentsPostMutationFetcher = (imageId: string,
    params?: AddCommentImagesImageIdCommentsPostParams, options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: CommentCreateDTO }): Promise<CommentResponseDTO> => {
    return addCommentImagesImageIdCommentsPost(imageId, arg, params, options);
  }
}
export const getAddCommentImagesImageIdCommentsPostMutationKey = (imageId: string,
    params?: AddCommentImagesImageIdCommentsPostParams,) => [`/images/${imageId}/comments`, ...(params ? [params]: [])] as const;

export type AddCommentImagesImageIdCommentsPostMutationResult = NonNullable<Awaited<ReturnType<typeof addCommentImagesImageIdCommentsPost>>>
export type AddCommentImagesImageIdCommentsPostMutationError = HTTPValidationError

/**
 * @summary Add Comment
 */
export const useAddCommentImagesImageIdCommentsPost = <TError = HTTPValidationError>(
  imageId: string,
    params?: AddCommentImagesImageIdCommentsPostParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof addCommentImagesImageIdCommentsPost>>, TError, Key, CommentCreateDTO, Awaited<ReturnType<typeof addCommentImagesImageIdCommentsPost>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAddCommentImagesImageIdCommentsPostMutationKey(imageId,params);
  const swrFn = getAddCommentImagesImageIdCommentsPostMutationFetcher(imageId,params, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Delete Comment
 */
export const deleteCommentImagesImageIdCommentsCommentIdDelete = (
    imageId: string,
    commentId: string,
    params?: DeleteCommentImagesImageIdCommentsCommentIdDeleteParams,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<unknown>(
    {url: `/images/${imageId}/comments/${commentId}`, method: 'DELETE',
        params
    },
    options);
  }



export const getDeleteCommentImagesImageIdCommentsCommentIdDeleteMutationFetcher = (imageId: string,
    commentId: string,
    params?: DeleteCommentImagesImageIdCommentsCommentIdDeleteParams, options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, __: { arg: Arguments }): Promise<unknown> => {
    return deleteCommentImagesImageIdCommentsCommentIdDelete(imageId, commentId, params, options);
  }
}
export const getDeleteCommentImagesImageIdCommentsCommentIdDeleteMutationKey = (imageId: string,
    commentId: string,
    params?: DeleteCommentImagesImageIdCommentsCommentIdDeleteParams,) => [`/images/${imageId}/comments/${commentId}`, ...(params ? [params]: [])] as const;

export type DeleteCommentImagesImageIdCommentsCommentIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCommentImagesImageIdCommentsCommentIdDelete>>>
export type DeleteCommentImagesImageIdCommentsCommentIdDeleteMutationError = HTTPValidationError

/**
 * @summary Delete Comment
 */
export const useDeleteCommentImagesImageIdCommentsCommentIdDelete = <TError = HTTPValidationError>(
  imageId: string,
    commentId: string,
    params?: DeleteCommentImagesImageIdCommentsCommentIdDeleteParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteCommentImagesImageIdCommentsCommentIdDelete>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteCommentImagesImageIdCommentsCommentIdDelete>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteCommentImagesImageIdCommentsCommentIdDeleteMutationKey(imageId,commentId,params);
  const swrFn = getDeleteCommentImagesImageIdCommentsCommentIdDeleteMutationFetcher(imageId,commentId,params, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Toggle Like
 */
export const toggleLikeImagesImageIdLikePost = (
    imageId: string,
    params?: ToggleLikeImagesImageIdLikePostParams,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<LikeToggleResponseDTO>(
    {url: `/images/${imageId}/like`, method: 'POST',
        params
    },
    options);
  }



export const getToggleLikeImagesImageIdLikePostMutationFetcher = (imageId: string,
    params?: ToggleLikeImagesImageIdLikePostParams, options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, __: { arg: Arguments }): Promise<LikeToggleResponseDTO> => {
    return toggleLikeImagesImageIdLikePost(imageId, params, options);
  }
}
export const getToggleLikeImagesImageIdLikePostMutationKey = (imageId: string,
    params?: ToggleLikeImagesImageIdLikePostParams,) => [`/images/${imageId}/like`, ...(params ? [params]: [])] as const;

export type ToggleLikeImagesImageIdLikePostMutationResult = NonNullable<Awaited<ReturnType<typeof toggleLikeImagesImageIdLikePost>>>
export type ToggleLikeImagesImageIdLikePostMutationError = HTTPValidationError

/**
 * @summary Toggle Like
 */
export const useToggleLikeImagesImageIdLikePost = <TError = HTTPValidationError>(
  imageId: string,
    params?: ToggleLikeImagesImageIdLikePostParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof toggleLikeImagesImageIdLikePost>>, TError, Key, Arguments, Awaited<ReturnType<typeof toggleLikeImagesImageIdLikePost>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getToggleLikeImagesImageIdLikePostMutationKey(imageId,params);
  const swrFn = getToggleLikeImagesImageIdLikePostMutationFetcher(imageId,params, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary List Collections
 */
export const listCollectionsCollectionsGet = (
    
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<CollectionDTO[]>(
    {url: `/collections/`, method: 'GET'
    },
    options);
  }



export const getListCollectionsCollectionsGetKey = () => [`/collections/`] as const;

export type ListCollectionsCollectionsGetQueryResult = NonNullable<Awaited<ReturnType<typeof listCollectionsCollectionsGet>>>
export type ListCollectionsCollectionsGetQueryError = unknown

/**
 * @summary List Collections
 */
export const useListCollectionsCollectionsGet = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof listCollectionsCollectionsGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getListCollectionsCollectionsGetKey() : null);
  const swrFn = () => listCollectionsCollectionsGet(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Create Collection
 */
export const createCollectionCollectionsPost = (
    collectionDTO: CollectionDTO,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<CollectionDTO>(
    {url: `/collections/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: collectionDTO
    },
    options);
  }



export const getCreateCollectionCollectionsPostMutationFetcher = ( options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: CollectionDTO }): Promise<CollectionDTO> => {
    return createCollectionCollectionsPost(arg, options);
  }
}
export const getCreateCollectionCollectionsPostMutationKey = () => [`/collections/`] as const;

export type CreateCollectionCollectionsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createCollectionCollectionsPost>>>
export type CreateCollectionCollectionsPostMutationError = HTTPValidationError

/**
 * @summary Create Collection
 */
export const useCreateCollectionCollectionsPost = <TError = HTTPValidationError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof createCollectionCollectionsPost>>, TError, Key, CollectionDTO, Awaited<ReturnType<typeof createCollectionCollectionsPost>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateCollectionCollectionsPostMutationKey();
  const swrFn = getCreateCollectionCollectionsPostMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Update Collection
 */
export const updateCollectionCollectionsCollectionIdPut = (
    collectionId: string,
    collectionDTO: CollectionDTO,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<CollectionDTO>(
    {url: `/collections/${collectionId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: collectionDTO
    },
    options);
  }



export const getUpdateCollectionCollectionsCollectionIdPutMutationFetcher = (collectionId: string, options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: CollectionDTO }): Promise<CollectionDTO> => {
    return updateCollectionCollectionsCollectionIdPut(collectionId, arg, options);
  }
}
export const getUpdateCollectionCollectionsCollectionIdPutMutationKey = (collectionId: string,) => [`/collections/${collectionId}`] as const;

export type UpdateCollectionCollectionsCollectionIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateCollectionCollectionsCollectionIdPut>>>
export type UpdateCollectionCollectionsCollectionIdPutMutationError = HTTPValidationError

/**
 * @summary Update Collection
 */
export const useUpdateCollectionCollectionsCollectionIdPut = <TError = HTTPValidationError>(
  collectionId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof updateCollectionCollectionsCollectionIdPut>>, TError, Key, CollectionDTO, Awaited<ReturnType<typeof updateCollectionCollectionsCollectionIdPut>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUpdateCollectionCollectionsCollectionIdPutMutationKey(collectionId);
  const swrFn = getUpdateCollectionCollectionsCollectionIdPutMutationFetcher(collectionId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Delete Collection
 */
export const deleteCollectionCollectionsCollectionIdDelete = (
    collectionId: string,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteCollectionCollectionsCollectionIdDelete200>(
    {url: `/collections/${collectionId}`, method: 'DELETE'
    },
    options);
  }



export const getDeleteCollectionCollectionsCollectionIdDeleteMutationFetcher = (collectionId: string, options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, __: { arg: Arguments }): Promise<DeleteCollectionCollectionsCollectionIdDelete200> => {
    return deleteCollectionCollectionsCollectionIdDelete(collectionId, options);
  }
}
export const getDeleteCollectionCollectionsCollectionIdDeleteMutationKey = (collectionId: string,) => [`/collections/${collectionId}`] as const;

export type DeleteCollectionCollectionsCollectionIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCollectionCollectionsCollectionIdDelete>>>
export type DeleteCollectionCollectionsCollectionIdDeleteMutationError = HTTPValidationError

/**
 * @summary Delete Collection
 */
export const useDeleteCollectionCollectionsCollectionIdDelete = <TError = HTTPValidationError>(
  collectionId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteCollectionCollectionsCollectionIdDelete>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteCollectionCollectionsCollectionIdDelete>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteCollectionCollectionsCollectionIdDeleteMutationKey(collectionId);
  const swrFn = getDeleteCollectionCollectionsCollectionIdDeleteMutationFetcher(collectionId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Health Check
 */
export const healthCheckHealthGet = (
    
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<unknown>(
    {url: `/health`, method: 'GET'
    },
    options);
  }



export const getHealthCheckHealthGetKey = () => [`/health`] as const;

export type HealthCheckHealthGetQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheckHealthGet>>>
export type HealthCheckHealthGetQueryError = unknown

/**
 * @summary Health Check
 */
export const useHealthCheckHealthGet = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getHealthCheckHealthGetKey() : null);
  const swrFn = () => healthCheckHealthGet(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Root
 */
export const rootGet = (
    
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<unknown>(
    {url: `/`, method: 'GET'
    },
    options);
  }



export const getRootGetKey = () => [`/`] as const;

export type RootGetQueryResult = NonNullable<Awaited<ReturnType<typeof rootGet>>>
export type RootGetQueryError = unknown

/**
 * @summary Root
 */
export const useRootGet = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof rootGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getRootGetKey() : null);
  const swrFn = () => rootGet(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
